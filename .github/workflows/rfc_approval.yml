name: RFC approval automation

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created, edited]

permissions:
  contents: read
  issues: write

jobs:
  rfc_approval:
    # Only run for RFC proposal issues that are still open
    if: startsWith(github.event.issue.title, 'New RFC') && github.event.issue.state == 'open'
    runs-on: ubuntu-latest

    steps:
      - name: Handle RFC approval logic
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = context.issue.number;
            const org = context.repo.owner;
            const repo = context.repo.repo;

            // ---------------------------------------------
            // Fetch members of the core team
            // ---------------------------------------------
            async function getTeamMembers() {
              const res = await github.request('GET /orgs/{org}/teams/{team_slug}/members', {
                org,
                team_slug: 'core',
                per_page: 100
              });
              return res.data.map(m => m.login);
            }

            const teamMembers = await getTeamMembers();
            const quorum = Math.ceil(teamMembers.length / 2);

            // -------------------------------------------------
            // If this workflow was triggered by issue creation
            // -------------------------------------------------
            if (context.eventName === 'issues' && context.payload.action === 'opened') {
              const body = `# RFC approval status: Pending\n\nCore team approvers:\nRejection from:\nAwaiting approval from:`;

              await github.rest.issues.createComment({
                owner: org,
                repo,
                issue_number: issueNumber,
                body
              });
              return; // Nothing more to do for newly-opened issues
            }

            // ---------------------------------------------------------------------
            // From here on we handle updates triggered by comment creation / edits
            // ---------------------------------------------------------------------

            // Collect all comments on the issue (may require pagination)
            const comments = await github.paginate(github.rest.issues.listComments, {
              owner: org,
              repo,
              issue_number: issueNumber,
              per_page: 100
            });

            const approvals = new Set();
            const rejections = new Set();

            for (const comment of comments) {
              const commenter = comment.user.login;
              if (!teamMembers.includes(commenter)) continue; // Only core team members count

              // Count approvals / rejections based on line starting with /approve or /reject
              const lines = comment.body.split(/\r?\n/);
              for (const rawLine of lines) {
                const line = rawLine.trim();
                if (/^\/approve\b/i.test(line)) {
                  approvals.add(commenter);
                } else if (/^\/reject\b/i.test(line)) {
                  rejections.add(commenter);
                }
              }
            }

            const awaiting = teamMembers.filter(u => !approvals.has(u) && !rejections.has(u));
            const status = approvals.size >= quorum && rejections.size === 0 ? 'Approved' : 'Pending';

            const statusBody = `# RFC approval status: ${status}\n\nCore team approvers: ${approvals.size ? [...approvals].join(', ') : 'None'}\nRejection from: ${rejections.size ? [...rejections].join(', ') : 'None'}\nAwaiting approval from: ${awaiting.length ? awaiting.join(', ') : 'None'}`;

            // Try to locate the existing status comment (starts with our header)
            let statusComment = comments.find(c => c.body.startsWith('# RFC approval status:'));

            if (statusComment) {
              await github.rest.issues.updateComment({
                owner: org,
                repo,
                comment_id: statusComment.id,
                body: statusBody
              });
            } else {
              // Fallback: create a new status comment if missing (shouldn't normally happen)
              await github.rest.issues.createComment({
                owner: org,
                repo,
                issue_number: issueNumber,
                body: statusBody
              });
            }
